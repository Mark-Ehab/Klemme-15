
KLEMME_15_METAWARE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  00000c9c  00000d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800194  00800194  00000e64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c46  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e73  00000000  00000000  00003dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001637  00000000  00000000  00004c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d8  00000000  00000000  00006270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ba9  00000000  00000000  00006848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001856  00000000  00000000  000073f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00008c47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_10>
  2c:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 39       	cpi	r26, 0x9F	; 159
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5d 04 	call	0x8ba	; 0x8ba <main>
  8a:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <alertMode>:

/* Function to handle the ALERT mode (Overflow Callback Function) */
void alertMode()
{
   /* Check if Klemma is in ready state */
   if(g_KLEMMA_STATE == READY)
  92:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <g_KLEMMA_STATE>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	09 f5       	brne	.+66     	; 0xdc <alertMode+0x4a>
   {
	   /* Klemma is in ready state */

	   /* Increase OVFs Counter */
	    g_tick++;
  9a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <g_tick>
  9e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <g_tick+0x1>
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <g_tick+0x1>
  a8:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <g_tick>

	    /* Check if OVFs Counter reached required OVFs number required to achieve 3 seconds */
	    if (g_tick == 184) /* 184 overflows correspond to 3 seconds with prescaler 1024 */
  ac:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <g_tick>
  b0:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <g_tick+0x1>
  b4:	88 3b       	cpi	r24, 0xB8	; 184
  b6:	91 05       	cpc	r25, r1
  b8:	99 f4       	brne	.+38     	; 0xe0 <alertMode+0x4e>
	    {
		/* 3 seconds Passed */

		/* Stop Timer0 */
		TIMER0_vidStop();
  ba:	0e 94 ad 05 	call	0xb5a	; 0xb5a <TIMER0_vidStop>

		/* Set g_ready_cnt Flag */
		g_ready_cnt = 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <g_ready_cnt>

		/* Reset g_Timer0_start_once Flag */
		g_Timer0_start_once = 0;
  c4:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>

		/* Reset OVFs Counter */
		g_tick = 0;
  c8:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <g_tick+0x1>
  cc:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <g_tick>

		/* Turn off RED LED and Turn on GREEN LED */
		LED_Off(LED_RED);
  d0:	0e 94 3d 04 	call	0x87a	; 0x87a <LED_Off>
		LED_on(LED_GREEN);
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	0e 94 1d 04 	call	0x83a	; 0x83a <LED_on>
  da:	02 c0       	rjmp	.+4      	; 0xe0 <alertMode+0x4e>
   else
   {
	   /* Klemma is not in ready state */

	   /* Stop Timer0 */
	   TIMER0_vidStop();
  dc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <TIMER0_vidStop>
   }

   /* Clear Timer0 OVF Flag */
   TIMER0_vidClearOvfFlag();
  e0:	0e 94 c1 05 	call	0xb82	; 0xb82 <TIMER0_vidClearOvfFlag>
  e4:	08 95       	ret

000000e6 <offMode>:

/* Function to handle the OFF mode */
void offMode()
{
    /* Set klemma state to off */
    g_KLEMMA_STATE = OFF;
  e6:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <g_KLEMMA_STATE>

    /* Reset g_ready_cnt flag */
    g_ready_cnt = 0;
  ea:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <g_ready_cnt>

    /* Reset  g_Timer0_start_once Flag */
    g_Timer0_start_once = 0;
  ee:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>

    /* Info to be displayed on lcd while on klemma off state */
    LCD_moveCursor(1, 0);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
    LCD_displayString("OFF    ");
  fa:	80 e6       	ldi	r24, 0x60	; 96
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>

    /* Turn off both RED and GREEN LEDs */
    LED_Off(LED_GREEN);
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	0e 94 3d 04 	call	0x87a	; 0x87a <LED_Off>
    LED_Off(LED_RED);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 3d 04 	call	0x87a	; 0x87a <LED_Off>
    LCD_moveCursor(3,0);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
    LCD_displayString("RED OFF GREEN OFF");
 116:	88 e6       	ldi	r24, 0x68	; 104
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 11e:	08 95       	ret

00000120 <readyMode>:

/* Function to handle the READY mode */
void readyMode()
{
    /* Set klemma state to ready */
    g_KLEMMA_STATE = READY;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <g_KLEMMA_STATE>

    /* Info to be displayed on lcd while on klemma ready state */
    LCD_moveCursor(1, 0);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
    LCD_displayString("READY   ");
 12c:	8a e7       	ldi	r24, 0x7A	; 122
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>

    /* Check if OVF Interrupt was entered or not */
    if (g_ready_cnt == 0) {
 134:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <g_ready_cnt>
 138:	81 11       	cpse	r24, r1
 13a:	18 c0       	rjmp	.+48     	; 0x16c <readyMode+0x4c>

	/* OVF Interrupt was not entered */

	/* Turn on RED LED and Turn off GREEN LED */
        LED_on(LED_RED);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 1d 04 	call	0x83a	; 0x83a <LED_on>
        LED_Off(LED_GREEN);
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 3d 04 	call	0x87a	; 0x87a <LED_Off>
	LCD_moveCursor(3,0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
        LCD_displayString("RED ON GREEN OFF ");
 150:	83 e8       	ldi	r24, 0x83	; 131
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>

        /* Check if Timer0 started or not */
        if(g_Timer0_start_once == 0)
 158:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
 15c:	81 11       	cpse	r24, r1
 15e:	0e c0       	rjmp	.+28     	; 0x17c <readyMode+0x5c>
        {
        	/* Timer0 has not started */

        	/* Start Timer0 */
        	TIMER0_vidStart();
 160:	0e 94 a6 05 	call	0xb4c	; 0xb4c <TIMER0_vidStart>

        	/* Set g_Timer0_start_once Flag */
        	g_Timer0_start_once = 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
 16a:	08 95       	ret
    else
    {
	    /* OVF Interrupt was entered */

	    /* Turn off RED LED and Turn on GREEN LED */
	    LCD_moveCursor(3,0);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	    LCD_displayString("RED OFF GREEN ON ");
 174:	85 e9       	ldi	r24, 0x95	; 149
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 17c:	08 95       	ret

0000017e <ignitionMode>:

/* Function to handle the IGNITION mode */
void ignitionMode()
{
    /* Set klemma state to ready */
    g_KLEMMA_STATE = IGNITION;
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <g_KLEMMA_STATE>

    /* Reset g_ready_cnt flag */
    g_ready_cnt = 0;
 184:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <g_ready_cnt>

    /* Reset  g_Timer0_start_once Flag */
    g_Timer0_start_once = 0;
 188:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>

    /* Info to be displayed on lcd while on klemma ready state */
    LCD_moveCursor(1,0);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
    LCD_displayString("IGNITION");
 194:	87 ea       	ldi	r24, 0xA7	; 167
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>

    /* Turn off both RED and GREEN LEDs */
    LED_Off(LED_GREEN);
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 3d 04 	call	0x87a	; 0x87a <LED_Off>
    LED_Off(LED_RED);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 3d 04 	call	0x87a	; 0x87a <LED_Off>
    LCD_moveCursor(3,0);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
    LCD_displayString("RED OFF GREEN OFF");
 1b0:	88 e6       	ldi	r24, 0x68	; 104
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 1b8:	08 95       	ret

000001ba <systemInit>:
}

/*==================== System Initialization ====================*/
void systemInit()
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <systemInit+0x6>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
    /* Set ADC pre-configurations */
    ADC_ConfigType ADC1 = {ADC_PRESCALER_128, ADC_REFERENCE_AVCC};
 1c4:	87 e0       	ldi	r24, 0x07	; 7
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	8a 83       	std	Y+2, r24	; 0x02

    /* Initialize LED system in the app */
    LED_Init_All();
 1cc:	0e 94 10 04 	call	0x820	; 0x820 <LED_Init_All>

    /* Initialize ADC */
    ADC_Init(&ADC1);
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <ADC_Init>

    /* Initialize Character LCD */
    LCD_init();
 1d8:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_init>
}
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <welcomeScreen>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	83 ed       	ldi	r24, 0xD3	; 211
 1ea:	90 e3       	ldi	r25, 0x30	; 48
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <welcomeScreen+0x6>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <welcomeScreen+0x10>
 1f6:	00 00       	nop

void welcomeScreen() {
	_delay_ms(1000);		/* Delay for 1 second */

	/* Initialize LCD */
	LCD_clearScreen();
 1f8:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_clearScreen>
	LCD_init();
 1fc:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_init>
	
	/* Display Team Information */
	LCD_moveCursor(1, 0);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(TEAM);
 208:	80 eb       	ldi	r24, 0xB0	; 176
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	80 e7       	ldi	r24, 0x70	; 112
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <welcomeScreen+0x30>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <welcomeScreen+0x3a>
 220:	00 00       	nop
	_delay_ms(50);			/* Delay for 50 milli seconds */
	LCD_clearScreen();
 222:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_clearScreen>
	LCD_moveCursor(1, 0);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(TEAM_REVERSE);
 22e:	82 ec       	ldi	r24, 0xC2	; 194
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	80 e7       	ldi	r24, 0x70	; 112
 23a:	92 e0       	ldi	r25, 0x02	; 2
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <welcomeScreen+0x56>
 244:	00 c0       	rjmp	.+0      	; 0x246 <welcomeScreen+0x60>
 246:	00 00       	nop
	_delay_ms(50);			/* Delay for 50 milli seconds */
	LCD_clearScreen();
 248:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_clearScreen>
	LCD_moveCursor(1, 0);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(TEAM);
 254:	80 eb       	ldi	r24, 0xB0	; 176
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	87 ea       	ldi	r24, 0xA7	; 167
 260:	91 e6       	ldi	r25, 0x61	; 97
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <welcomeScreen+0x7c>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <welcomeScreen+0x86>
 26c:	00 00       	nop
	_delay_ms(2000);		/* Delay for 2 seconds */
	LCD_clearScreen();
 26e:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(NAME_1);
 27a:	84 ed       	ldi	r24, 0xD4	; 212
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
	LCD_moveCursor(1, 0);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(NAME_2);
 28a:	89 ee       	ldi	r24, 0xE9	; 233
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
	LCD_moveCursor(2, 0);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(NAME_3);
 29a:	8d ef       	ldi	r24, 0xFD	; 253
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
	LCD_moveCursor(3, 0);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(NAME_4);
 2aa:	81 e1       	ldi	r24, 0x11	; 17
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	83 ed       	ldi	r24, 0xD3	; 211
 2b6:	90 e3       	ldi	r25, 0x30	; 48
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <welcomeScreen+0xd2>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <welcomeScreen+0xdc>
 2c2:	00 00       	nop
	_delay_ms(1000);		/* Delay for 1 second */
	LCD_clearScreen();
 2c4:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_clearScreen>
	LCD_moveCursor(1, 0);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(NAME_5);
 2d0:	85 e2       	ldi	r24, 0x25	; 37
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	8b e7       	ldi	r24, 0x7B	; 123
 2dc:	92 e9       	ldi	r25, 0x92	; 146
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <welcomeScreen+0xf8>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <welcomeScreen+0x102>
 2e8:	00 00       	nop
	_delay_ms(3000); 		/* Delay for 3 seconds */
	
	/* Display class and company info */
	LCD_clearScreen();
 2ea:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_clearScreen>
	LCD_moveCursor(0,0);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(COMPANY);
 2f6:	8a e3       	ldi	r24, 0x3A	; 58
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
	LCD_moveCursor(1,0);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(CLASS);
 306:	8d e4       	ldi	r24, 0x4D	; 77
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	8b e7       	ldi	r24, 0x7B	; 123
 312:	92 e9       	ldi	r25, 0x92	; 146
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <welcomeScreen+0x12e>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <welcomeScreen+0x138>
 31e:	00 00       	nop
	_delay_ms(3000);
	
	/* Display Welcome Message */
	LCD_clearScreen();
 320:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_clearScreen>
	LCD_moveCursor(1, 3);
 324:	63 e0       	ldi	r22, 0x03	; 3
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(WELCOME);
 32c:	8e e5       	ldi	r24, 0x5E	; 94
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 334:	2f ef       	ldi	r18, 0xFF	; 255
 336:	87 ea       	ldi	r24, 0xA7	; 167
 338:	91 e6       	ldi	r25, 0x61	; 97
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <welcomeScreen+0x154>
 342:	00 c0       	rjmp	.+0      	; 0x344 <welcomeScreen+0x15e>
 344:	00 00       	nop
	_delay_ms(2000); 		/* Delay for 2 seconds */
	

	/* Display Start Engine Message */
	LCD_clearScreen();
 346:	0e 94 a2 03 	call	0x744	; 0x744 <LCD_clearScreen>
	LCD_moveCursor(1, 2);
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
	LCD_displayString(START_CAR);
 352:	89 e6       	ldi	r24, 0x69	; 105
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	83 ed       	ldi	r24, 0xD3	; 211
 35e:	90 e3       	ldi	r25, 0x30	; 48
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <welcomeScreen+0x17a>
 368:	00 c0       	rjmp	.+0      	; 0x36a <welcomeScreen+0x184>
 36a:	00 00       	nop
 36c:	08 95       	ret

0000036e <App>:
    LCD_init();
}

/*==================== Main Application Function ====================*/
void App()
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	00 d0       	rcall	.+0      	; 0x374 <App+0x6>
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
    /* Local Variables Definitions */
    uint16_t readBuffer = 0;
 378:	1a 82       	std	Y+2, r1	; 0x02
 37a:	19 82       	std	Y+1, r1	; 0x01
    
    /*==================== System Initialization ====================*/
    /* Display APP Welcome Screen  */
    welcomeScreen();
 37c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <welcomeScreen>

    /* Initialize System */
    systemInit();
 380:	0e 94 dd 00 	call	0x1ba	; 0x1ba <systemInit>

    /* Initialize Timer0 */
    TIMER0_vidInit();
 384:	0e 94 95 05 	call	0xb2a	; 0xb2a <TIMER0_vidInit>

    /* Register OVF Callback Function */
    TIMER0_OverflowCallbackFunc = alertMode;
    TIMER0_u8SetOverflowCallback(alertMode);
 388:	89 e4       	ldi	r24, 0x49	; 73
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TIMER0_u8SetOverflowCallback>

    /* Set Preload Value */
    TIMER0_vidSetPreloadValue(27);
 390:	8b e1       	ldi	r24, 0x1B	; 27
 392:	0e 94 b1 05 	call	0xb62	; 0xb62 <TIMER0_vidSetPreloadValue>

    /* Enable OVF Interrupt */
    TIMER0_vidEnableOverflowInterrupt();
 396:	0e 94 b3 05 	call	0xb66	; 0xb66 <TIMER0_vidEnableOverflowInterrupt>

    /* Enable Global Interrupt Enable */
    GlobalInterrupt_enable();
 39a:	0e 94 91 05 	call	0xb22	; 0xb22 <GlobalInterrupt_enable>

    /*================================Begin APP==================================*/
    LCD_moveCursor(0, 0);
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
    LCD_displayString("KLEMME STATE ");
 3a6:	86 e7       	ldi	r24, 0x76	; 118
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
    LCD_moveCursor(2, 0);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
    LCD_displayString("KLEMME RANGE = ");
 3b6:	84 e8       	ldi	r24, 0x84	; 132
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
    
    while (1)
    {
        /* Read ADC value */
        ADC_readChannel_interrupt(ADC_CHANNEL_0, &readBuffer);
 3be:	be 01       	movw	r22, r28
 3c0:	6f 5f       	subi	r22, 0xFF	; 255
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 98 04 	call	0x930	; 0x930 <ADC_readChannel_interrupt>

        /* Print ADC value on LCD */
        LCD_moveCursor(2, 15);
 3ca:	6f e0       	ldi	r22, 0x0F	; 15
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_moveCursor>
        LCD_integerToString(readBuffer);
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	9a 81       	ldd	r25, Y+2	; 0x02
 3d6:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_integerToString>
        LCD_displayString("  ");
 3da:	85 e6       	ldi	r24, 0x65	; 101
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
        
        /* Determine mode based on ADC value */
        if (readBuffer < 50)
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	9a 81       	ldd	r25, Y+2	; 0x02
 3e6:	82 33       	cpi	r24, 0x32	; 50
 3e8:	91 05       	cpc	r25, r1
 3ea:	18 f4       	brcc	.+6      	; 0x3f2 <App+0x84>
        {
        	/* Enter off mode */
                offMode();
 3ec:	0e 94 73 00 	call	0xe6	; 0xe6 <offMode>
 3f0:	e6 cf       	rjmp	.-52     	; 0x3be <App+0x50>
        }
        else if (readBuffer < 100)
 3f2:	84 36       	cpi	r24, 0x64	; 100
 3f4:	91 05       	cpc	r25, r1
 3f6:	18 f4       	brcc	.+6      	; 0x3fe <App+0x90>
        {
        	/* Enter ready mode */
                readyMode();
 3f8:	0e 94 90 00 	call	0x120	; 0x120 <readyMode>
 3fc:	e0 cf       	rjmp	.-64     	; 0x3be <App+0x50>
        }
	else
        {
		/* Enter ignition mode */
		ignitionMode();
 3fe:	0e 94 bf 00 	call	0x17e	; 0x17e <ignitionMode>
 402:	dd cf       	rjmp	.-70     	; 0x3be <App+0x50>

00000404 <LCD_sendCommand>:
}
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col);				/* go to to the required LCD position */
	LCD_displayString(Str);					/* display the string */
}
 404:	cf 93       	push	r28
 406:	c8 2f       	mov	r28, r24
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 412:	8f e9       	ldi	r24, 0x9F	; 159
 414:	9f e0       	ldi	r25, 0x0F	; 15
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <LCD_sendCommand+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <LCD_sendCommand+0x18>
 41c:	00 00       	nop
 41e:	41 e0       	ldi	r20, 0x01	; 1
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 428:	8f e9       	ldi	r24, 0x9F	; 159
 42a:	9f e0       	ldi	r25, 0x0F	; 15
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <LCD_sendCommand+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <LCD_sendCommand+0x2e>
 432:	00 00       	nop
 434:	4c 2f       	mov	r20, r28
 436:	40 71       	andi	r20, 0x10	; 16
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	55 95       	asr	r21
 43c:	47 95       	ror	r20
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	55 95       	asr	r21
 444:	47 95       	ror	r20
 446:	55 95       	asr	r21
 448:	47 95       	ror	r20
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 452:	4c 2f       	mov	r20, r28
 454:	40 72       	andi	r20, 0x20	; 32
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	55 95       	asr	r21
 45a:	47 95       	ror	r20
 45c:	55 95       	asr	r21
 45e:	47 95       	ror	r20
 460:	55 95       	asr	r21
 462:	47 95       	ror	r20
 464:	55 95       	asr	r21
 466:	47 95       	ror	r20
 468:	55 95       	asr	r21
 46a:	47 95       	ror	r20
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 474:	4c 2f       	mov	r20, r28
 476:	40 74       	andi	r20, 0x40	; 64
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	04 2e       	mov	r0, r20
 47c:	45 2f       	mov	r20, r21
 47e:	00 0c       	add	r0, r0
 480:	44 1f       	adc	r20, r20
 482:	55 0b       	sbc	r21, r21
 484:	00 0c       	add	r0, r0
 486:	44 1f       	adc	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 492:	4c 2f       	mov	r20, r28
 494:	44 1f       	adc	r20, r20
 496:	44 27       	eor	r20, r20
 498:	44 1f       	adc	r20, r20
 49a:	64 e0       	ldi	r22, 0x04	; 4
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 4a2:	8f e9       	ldi	r24, 0x9F	; 159
 4a4:	9f e0       	ldi	r25, 0x0F	; 15
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <LCD_sendCommand+0xa2>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <LCD_sendCommand+0xa8>
 4ac:	00 00       	nop
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	62 e0       	ldi	r22, 0x02	; 2
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 4b8:	8f e9       	ldi	r24, 0x9F	; 159
 4ba:	9f e0       	ldi	r25, 0x0F	; 15
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <LCD_sendCommand+0xb8>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <LCD_sendCommand+0xbe>
 4c2:	00 00       	nop
 4c4:	41 e0       	ldi	r20, 0x01	; 1
 4c6:	62 e0       	ldi	r22, 0x02	; 2
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 4ce:	8f e9       	ldi	r24, 0x9F	; 159
 4d0:	9f e0       	ldi	r25, 0x0F	; 15
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <LCD_sendCommand+0xce>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <LCD_sendCommand+0xd4>
 4d8:	00 00       	nop
 4da:	4c 2f       	mov	r20, r28
 4dc:	41 70       	andi	r20, 0x01	; 1
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 4e6:	4c 2f       	mov	r20, r28
 4e8:	42 70       	andi	r20, 0x02	; 2
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	55 95       	asr	r21
 4ee:	47 95       	ror	r20
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 4f8:	4c 2f       	mov	r20, r28
 4fa:	44 70       	andi	r20, 0x04	; 4
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	55 95       	asr	r21
 500:	47 95       	ror	r20
 502:	55 95       	asr	r21
 504:	47 95       	ror	r20
 506:	62 e0       	ldi	r22, 0x02	; 2
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 50e:	c8 70       	andi	r28, 0x08	; 8
 510:	4c 2f       	mov	r20, r28
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	55 95       	asr	r21
 516:	47 95       	ror	r20
 518:	55 95       	asr	r21
 51a:	47 95       	ror	r20
 51c:	55 95       	asr	r21
 51e:	47 95       	ror	r20
 520:	64 e0       	ldi	r22, 0x04	; 4
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 528:	8f e9       	ldi	r24, 0x9F	; 159
 52a:	9f e0       	ldi	r25, 0x0F	; 15
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <LCD_sendCommand+0x128>
 530:	00 c0       	rjmp	.+0      	; 0x532 <LCD_sendCommand+0x12e>
 532:	00 00       	nop
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	62 e0       	ldi	r22, 0x02	; 2
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 53e:	8f e9       	ldi	r24, 0x9F	; 159
 540:	9f e0       	ldi	r25, 0x0F	; 15
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <LCD_sendCommand+0x13e>
 546:	00 c0       	rjmp	.+0      	; 0x548 <LCD_sendCommand+0x144>
 548:	00 00       	nop
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <LCD_init>:
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	62 e0       	ldi	r22, 0x02	; 2
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_setupPinDirection>
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	63 e0       	ldi	r22, 0x03	; 3
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_setupPinDirection>
 562:	2f ef       	ldi	r18, 0xFF	; 255
 564:	89 ef       	ldi	r24, 0xF9	; 249
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	21 50       	subi	r18, 0x01	; 1
 56a:	80 40       	sbci	r24, 0x00	; 0
 56c:	90 40       	sbci	r25, 0x00	; 0
 56e:	e1 f7       	brne	.-8      	; 0x568 <LCD_init+0x1a>
 570:	00 c0       	rjmp	.+0      	; 0x572 <LCD_init+0x24>
 572:	00 00       	nop
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_setupPinDirection>
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_setupPinDirection>
 588:	41 e0       	ldi	r20, 0x01	; 1
 58a:	62 e0       	ldi	r22, 0x02	; 2
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_setupPinDirection>
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	64 e0       	ldi	r22, 0x04	; 4
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_setupPinDirection>
 59c:	83 e3       	ldi	r24, 0x33	; 51
 59e:	0e 94 02 02 	call	0x404	; 0x404 <LCD_sendCommand>
 5a2:	82 e3       	ldi	r24, 0x32	; 50
 5a4:	0e 94 02 02 	call	0x404	; 0x404 <LCD_sendCommand>
 5a8:	88 e2       	ldi	r24, 0x28	; 40
 5aa:	0e 94 02 02 	call	0x404	; 0x404 <LCD_sendCommand>
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 02 02 	call	0x404	; 0x404 <LCD_sendCommand>
 5b4:	8c e0       	ldi	r24, 0x0C	; 12
 5b6:	0e 94 02 02 	call	0x404	; 0x404 <LCD_sendCommand>
 5ba:	8f e3       	ldi	r24, 0x3F	; 63
 5bc:	9c e9       	ldi	r25, 0x9C	; 156
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <LCD_init+0x70>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <LCD_init+0x76>
 5c4:	00 00       	nop
 5c6:	8c e0       	ldi	r24, 0x0C	; 12
 5c8:	0e 94 02 02 	call	0x404	; 0x404 <LCD_sendCommand>
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	0e 94 02 02 	call	0x404	; 0x404 <LCD_sendCommand>
 5d2:	08 95       	ret

000005d4 <LCD_displayCharacter>:
 5d4:	cf 93       	push	r28
 5d6:	c8 2f       	mov	r28, r24
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	63 e0       	ldi	r22, 0x03	; 3
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 5e2:	8f e9       	ldi	r24, 0x9F	; 159
 5e4:	9f e0       	ldi	r25, 0x0F	; 15
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_displayCharacter+0x12>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_displayCharacter+0x18>
 5ec:	00 00       	nop
 5ee:	41 e0       	ldi	r20, 0x01	; 1
 5f0:	62 e0       	ldi	r22, 0x02	; 2
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 5f8:	8f e9       	ldi	r24, 0x9F	; 159
 5fa:	9f e0       	ldi	r25, 0x0F	; 15
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <LCD_displayCharacter+0x28>
 600:	00 c0       	rjmp	.+0      	; 0x602 <LCD_displayCharacter+0x2e>
 602:	00 00       	nop
 604:	4c 2f       	mov	r20, r28
 606:	40 71       	andi	r20, 0x10	; 16
 608:	50 e0       	ldi	r21, 0x00	; 0
 60a:	55 95       	asr	r21
 60c:	47 95       	ror	r20
 60e:	55 95       	asr	r21
 610:	47 95       	ror	r20
 612:	55 95       	asr	r21
 614:	47 95       	ror	r20
 616:	55 95       	asr	r21
 618:	47 95       	ror	r20
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 622:	4c 2f       	mov	r20, r28
 624:	40 72       	andi	r20, 0x20	; 32
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	55 95       	asr	r21
 62a:	47 95       	ror	r20
 62c:	55 95       	asr	r21
 62e:	47 95       	ror	r20
 630:	55 95       	asr	r21
 632:	47 95       	ror	r20
 634:	55 95       	asr	r21
 636:	47 95       	ror	r20
 638:	55 95       	asr	r21
 63a:	47 95       	ror	r20
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 644:	4c 2f       	mov	r20, r28
 646:	40 74       	andi	r20, 0x40	; 64
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	04 2e       	mov	r0, r20
 64c:	45 2f       	mov	r20, r21
 64e:	00 0c       	add	r0, r0
 650:	44 1f       	adc	r20, r20
 652:	55 0b       	sbc	r21, r21
 654:	00 0c       	add	r0, r0
 656:	44 1f       	adc	r20, r20
 658:	55 1f       	adc	r21, r21
 65a:	62 e0       	ldi	r22, 0x02	; 2
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 662:	4c 2f       	mov	r20, r28
 664:	44 1f       	adc	r20, r20
 666:	44 27       	eor	r20, r20
 668:	44 1f       	adc	r20, r20
 66a:	64 e0       	ldi	r22, 0x04	; 4
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 672:	8f e9       	ldi	r24, 0x9F	; 159
 674:	9f e0       	ldi	r25, 0x0F	; 15
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <LCD_displayCharacter+0xa2>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <LCD_displayCharacter+0xa8>
 67c:	00 00       	nop
 67e:	40 e0       	ldi	r20, 0x00	; 0
 680:	62 e0       	ldi	r22, 0x02	; 2
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 688:	8f e9       	ldi	r24, 0x9F	; 159
 68a:	9f e0       	ldi	r25, 0x0F	; 15
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <LCD_displayCharacter+0xb8>
 690:	00 c0       	rjmp	.+0      	; 0x692 <LCD_displayCharacter+0xbe>
 692:	00 00       	nop
 694:	41 e0       	ldi	r20, 0x01	; 1
 696:	62 e0       	ldi	r22, 0x02	; 2
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 69e:	8f e9       	ldi	r24, 0x9F	; 159
 6a0:	9f e0       	ldi	r25, 0x0F	; 15
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <LCD_displayCharacter+0xce>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <LCD_displayCharacter+0xd4>
 6a8:	00 00       	nop
 6aa:	4c 2f       	mov	r20, r28
 6ac:	41 70       	andi	r20, 0x01	; 1
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 6b6:	4c 2f       	mov	r20, r28
 6b8:	42 70       	andi	r20, 0x02	; 2
 6ba:	50 e0       	ldi	r21, 0x00	; 0
 6bc:	55 95       	asr	r21
 6be:	47 95       	ror	r20
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 6c8:	4c 2f       	mov	r20, r28
 6ca:	44 70       	andi	r20, 0x04	; 4
 6cc:	50 e0       	ldi	r21, 0x00	; 0
 6ce:	55 95       	asr	r21
 6d0:	47 95       	ror	r20
 6d2:	55 95       	asr	r21
 6d4:	47 95       	ror	r20
 6d6:	62 e0       	ldi	r22, 0x02	; 2
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 6de:	c8 70       	andi	r28, 0x08	; 8
 6e0:	4c 2f       	mov	r20, r28
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	55 95       	asr	r21
 6e6:	47 95       	ror	r20
 6e8:	55 95       	asr	r21
 6ea:	47 95       	ror	r20
 6ec:	55 95       	asr	r21
 6ee:	47 95       	ror	r20
 6f0:	64 e0       	ldi	r22, 0x04	; 4
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 6f8:	8f e9       	ldi	r24, 0x9F	; 159
 6fa:	9f e0       	ldi	r25, 0x0F	; 15
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCD_displayCharacter+0x128>
 700:	00 c0       	rjmp	.+0      	; 0x702 <LCD_displayCharacter+0x12e>
 702:	00 00       	nop
 704:	40 e0       	ldi	r20, 0x00	; 0
 706:	62 e0       	ldi	r22, 0x02	; 2
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 70e:	8f e9       	ldi	r24, 0x9F	; 159
 710:	9f e0       	ldi	r25, 0x0F	; 15
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <LCD_displayCharacter+0x13e>
 716:	00 c0       	rjmp	.+0      	; 0x718 <LCD_displayCharacter+0x144>
 718:	00 00       	nop
 71a:	cf 91       	pop	r28
 71c:	08 95       	ret

0000071e <LCD_displayString>:
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	8c 01       	movw	r16, r24
 726:	c0 e0       	ldi	r28, 0x00	; 0
 728:	03 c0       	rjmp	.+6      	; 0x730 <LCD_displayString+0x12>
 72a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_displayCharacter>
 72e:	cf 5f       	subi	r28, 0xFF	; 255
 730:	f8 01       	movw	r30, r16
 732:	ec 0f       	add	r30, r28
 734:	f1 1d       	adc	r31, r1
 736:	80 81       	ld	r24, Z
 738:	81 11       	cpse	r24, r1
 73a:	f7 cf       	rjmp	.-18     	; 0x72a <LCD_displayString+0xc>
 73c:	cf 91       	pop	r28
 73e:	1f 91       	pop	r17
 740:	0f 91       	pop	r16
 742:	08 95       	ret

00000744 <LCD_clearScreen>:
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	0e 94 02 02 	call	0x404	; 0x404 <LCD_sendCommand>
 74a:	08 95       	ret

0000074c <LCD_moveCursor>:
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	49 f0       	breq	.+18     	; 0x762 <LCD_moveCursor+0x16>
 750:	28 f0       	brcs	.+10     	; 0x75c <LCD_moveCursor+0x10>
 752:	82 30       	cpi	r24, 0x02	; 2
 754:	49 f0       	breq	.+18     	; 0x768 <LCD_moveCursor+0x1c>
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	51 f0       	breq	.+20     	; 0x76e <LCD_moveCursor+0x22>
 75a:	0c c0       	rjmp	.+24     	; 0x774 <LCD_moveCursor+0x28>
 75c:	80 e8       	ldi	r24, 0x80	; 128
 75e:	86 0f       	add	r24, r22
 760:	0a c0       	rjmp	.+20     	; 0x776 <LCD_moveCursor+0x2a>
 762:	80 ec       	ldi	r24, 0xC0	; 192
 764:	86 0f       	add	r24, r22
 766:	07 c0       	rjmp	.+14     	; 0x776 <LCD_moveCursor+0x2a>
 768:	84 e9       	ldi	r24, 0x94	; 148
 76a:	86 0f       	add	r24, r22
 76c:	04 c0       	rjmp	.+8      	; 0x776 <LCD_moveCursor+0x2a>
 76e:	84 ed       	ldi	r24, 0xD4	; 212
 770:	86 0f       	add	r24, r22
 772:	01 c0       	rjmp	.+2      	; 0x776 <LCD_moveCursor+0x2a>
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	80 68       	ori	r24, 0x80	; 128
 778:	0e 94 02 02 	call	0x404	; 0x404 <LCD_sendCommand>
 77c:	08 95       	ret

0000077e <LCD_integerToString>:
void LCD_integerToString(int data)
{
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	60 97       	sbiw	r28, 0x10	; 16
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	f8 94       	cli
 78c:	de bf       	out	0x3e, r29	; 62
 78e:	0f be       	out	0x3f, r0	; 63
 790:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 792:	4a e0       	ldi	r20, 0x0A	; 10
 794:	be 01       	movw	r22, r28
 796:	6f 5f       	subi	r22, 0xFF	; 255
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	0e 94 17 06 	call	0xc2e	; 0xc2e <__itoa_ncheck>
	char buff[16];						/* String to hold the ascii result */
	itoa(data,buff,10);					/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	LCD_displayString(buff);			 /* Display the string */
 79e:	ce 01       	movw	r24, r28
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_displayString>
}
 7a6:	60 96       	adiw	r28, 0x10	; 16
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	f8 94       	cli
 7ac:	de bf       	out	0x3e, r29	; 62
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	cd bf       	out	0x3d, r28	; 61
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <LED_Init>:

#include "LED.h"

/*Initialization of all LEDs in the kit used*/
void LED_Init(uint8 Led_Color) {
	switch (Led_Color) {
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	89 f0       	breq	.+34     	; 0x7de <LED_Init+0x26>
 7bc:	28 f0       	brcs	.+10     	; 0x7c8 <LED_Init+0x10>
 7be:	82 30       	cpi	r24, 0x02	; 2
 7c0:	c9 f0       	breq	.+50     	; 0x7f4 <LED_Init+0x3c>
 7c2:	83 30       	cpi	r24, 0x03	; 3
 7c4:	11 f1       	breq	.+68     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7c6:	08 95       	ret
	case LED_BLUE:
		DIO_setupPinDirection(LED_BLUE_PORT, LED_BLUE_PIN, PIN_OUTPUT);
 7c8:	41 e0       	ldi	r20, 0x01	; 1
 7ca:	65 e0       	ldi	r22, 0x05	; 5
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_setupPinDirection>
		DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	65 e0       	ldi	r22, 0x05	; 5
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
		break;
 7dc:	08 95       	ret

	case LED_RED:
		DIO_setupPinDirection(LED_RED_PORT, LED_RED_PIN, PIN_OUTPUT);
 7de:	41 e0       	ldi	r20, 0x01	; 1
 7e0:	67 e0       	ldi	r22, 0x07	; 7
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_setupPinDirection>
		DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_LOW);
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	67 e0       	ldi	r22, 0x07	; 7
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
		break;
 7f2:	08 95       	ret

	case LED_YELLOW:
			DIO_setupPinDirection(LED_YELLOW_PORT, LED_YELLOW_PIN, PIN_OUTPUT);
 7f4:	41 e0       	ldi	r20, 0x01	; 1
 7f6:	66 e0       	ldi	r22, 0x06	; 6
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_setupPinDirection>
			DIO_writePin(LED_YELLOW_PORT,  LED_YELLOW_PIN, LOGIC_LOW);
 7fe:	40 e0       	ldi	r20, 0x00	; 0
 800:	66 e0       	ldi	r22, 0x06	; 6
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
		break;
 808:	08 95       	ret

	case LED_GREEN:
				DIO_setupPinDirection(LED_GREEN_PORT,  LED_GREEN_PIN, PIN_OUTPUT);
 80a:	41 e0       	ldi	r20, 0x01	; 1
 80c:	64 e0       	ldi	r22, 0x04	; 4
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_setupPinDirection>
				DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_LOW);
 814:	40 e0       	ldi	r20, 0x00	; 0
 816:	64 e0       	ldi	r22, 0x04	; 4
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 81e:	08 95       	ret

00000820 <LED_Init_All>:
	}
}

/*Group Intialization*/
void LED_Init_All(){
	LED_Init(LED_BLUE);
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LED_Init>
	LED_Init(LED_RED);
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LED_Init>
	LED_Init(LED_YELLOW);
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LED_Init>
	LED_Init(LED_GREEN);
 832:	83 e0       	ldi	r24, 0x03	; 3
 834:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LED_Init>
 838:	08 95       	ret

0000083a <LED_on>:
}
/*Setting the LED being passed to the function*/
void LED_on(uint8 Led_Color){
	switch (Led_Color) {
 83a:	81 30       	cpi	r24, 0x01	; 1
 83c:	61 f0       	breq	.+24     	; 0x856 <LED_on+0x1c>
 83e:	28 f0       	brcs	.+10     	; 0x84a <LED_on+0x10>
 840:	82 30       	cpi	r24, 0x02	; 2
 842:	79 f0       	breq	.+30     	; 0x862 <__stack+0x3>
 844:	83 30       	cpi	r24, 0x03	; 3
 846:	99 f0       	breq	.+38     	; 0x86e <__stack+0xf>
 848:	08 95       	ret
	case LED_BLUE:
		DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_HIGH);
 84a:	41 e0       	ldi	r20, 0x01	; 1
 84c:	65 e0       	ldi	r22, 0x05	; 5
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
		break;
 854:	08 95       	ret

	case LED_RED:
		DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_HIGH);
 856:	41 e0       	ldi	r20, 0x01	; 1
 858:	67 e0       	ldi	r22, 0x07	; 7
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
		break;
 860:	08 95       	ret

	case LED_YELLOW:
		DIO_writePin(LED_YELLOW_PORT,  LED_YELLOW_PIN, LOGIC_HIGH);
 862:	41 e0       	ldi	r20, 0x01	; 1
 864:	66 e0       	ldi	r22, 0x06	; 6
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
		break;
 86c:	08 95       	ret

	case LED_GREEN:
		DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_HIGH);
 86e:	41 e0       	ldi	r20, 0x01	; 1
 870:	64 e0       	ldi	r22, 0x04	; 4
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 878:	08 95       	ret

0000087a <LED_Off>:
	/*MISRA C 2012 - 16.4 default must be present in every switch statement*/
	/*Left for future update for error handling*/
	}
}
void LED_Off(uint8 Led_Color){
	switch (Led_Color) {
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	61 f0       	breq	.+24     	; 0x896 <LED_Off+0x1c>
 87e:	28 f0       	brcs	.+10     	; 0x88a <LED_Off+0x10>
 880:	82 30       	cpi	r24, 0x02	; 2
 882:	79 f0       	breq	.+30     	; 0x8a2 <LED_Off+0x28>
 884:	83 30       	cpi	r24, 0x03	; 3
 886:	99 f0       	breq	.+38     	; 0x8ae <LED_Off+0x34>
 888:	08 95       	ret
	case LED_BLUE:
		DIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
 88a:	40 e0       	ldi	r20, 0x00	; 0
 88c:	65 e0       	ldi	r22, 0x05	; 5
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
		break;
 894:	08 95       	ret

	case LED_RED:
		DIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_LOW);
 896:	40 e0       	ldi	r20, 0x00	; 0
 898:	67 e0       	ldi	r22, 0x07	; 7
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
		break;
 8a0:	08 95       	ret

	case LED_YELLOW:
		DIO_writePin(LED_YELLOW_PORT, LED_YELLOW_PIN, LOGIC_LOW);
 8a2:	40 e0       	ldi	r20, 0x00	; 0
 8a4:	66 e0       	ldi	r22, 0x06	; 6
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
		break;
 8ac:	08 95       	ret

	case LED_GREEN:
		DIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_LOW);
 8ae:	40 e0       	ldi	r20, 0x00	; 0
 8b0:	64 e0       	ldi	r22, 0x04	; 4
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_writePin>
 8b8:	08 95       	ret

000008ba <main>:

/* Program Entry Point */
int main(void)
{
	/* Start the app */
	App();
 8ba:	0e 94 b7 01 	call	0x36e	; 0x36e <App>
 8be:	ff cf       	rjmp	.-2      	; 0x8be <main+0x4>

000008c0 <__vector_16>:
	while(!(GET_BIT(ADCSRA , ADIF)));
	SET_BIT(ADCSRA , ADIF);
	*read_buffer = 0xFF & ADCL;
	*read_buffer = ((*read_buffer & 0xFF) | (ADCH<<8));
	return E_OK;
}
 8c0:	1f 92       	push	r1
 8c2:	0f 92       	push	r0
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	0f 92       	push	r0
 8c8:	11 24       	eor	r1, r1
 8ca:	8f 93       	push	r24
 8cc:	9f 93       	push	r25
 8ce:	ef 93       	push	r30
 8d0:	ff 93       	push	r31
 8d2:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <g_ADCBuffer>
 8d6:	f0 91 9e 01 	lds	r31, 0x019E	; 0x80019e <g_ADCBuffer+0x1>
 8da:	84 b1       	in	r24, 0x04	; 4
 8dc:	95 b1       	in	r25, 0x05	; 5
 8de:	91 83       	std	Z+1, r25	; 0x01
 8e0:	80 83       	st	Z, r24
 8e2:	ff 91       	pop	r31
 8e4:	ef 91       	pop	r30
 8e6:	9f 91       	pop	r25
 8e8:	8f 91       	pop	r24
 8ea:	0f 90       	pop	r0
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	0f 90       	pop	r0
 8f0:	1f 90       	pop	r1
 8f2:	18 95       	reti

000008f4 <ADC_Init>:
 8f4:	fc 01       	movw	r30, r24
 8f6:	91 81       	ldd	r25, Z+1	; 0x01
 8f8:	30 81       	ld	r19, Z
 8fa:	86 b1       	in	r24, 0x06	; 6
 8fc:	80 68       	ori	r24, 0x80	; 128
 8fe:	86 b9       	out	0x06, r24	; 6
 900:	86 b1       	in	r24, 0x06	; 6
 902:	87 7f       	andi	r24, 0xF7	; 247
 904:	86 b9       	out	0x06, r24	; 6
 906:	27 b1       	in	r18, 0x07	; 7
 908:	40 e4       	ldi	r20, 0x40	; 64
 90a:	94 9f       	mul	r25, r20
 90c:	c0 01       	movw	r24, r0
 90e:	11 24       	eor	r1, r1
 910:	92 2f       	mov	r25, r18
 912:	9f 73       	andi	r25, 0x3F	; 63
 914:	89 2b       	or	r24, r25
 916:	87 b9       	out	0x07, r24	; 7
 918:	8f ef       	ldi	r24, 0xFF	; 255
 91a:	83 0f       	add	r24, r19
 91c:	87 30       	cpi	r24, 0x07	; 7
 91e:	30 f4       	brcc	.+12     	; 0x92c <ADC_Init+0x38>
 920:	86 b1       	in	r24, 0x06	; 6
 922:	88 7f       	andi	r24, 0xF8	; 248
 924:	38 2b       	or	r19, r24
 926:	36 b9       	out	0x06, r19	; 6
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	08 95       	ret
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	08 95       	ret

00000930 <ADC_readChannel_interrupt>:


Std_ReturnType ADC_readChannel_interrupt(uint8 channelNum, uint16 *read_buffer){
	g_ADCBuffer = read_buffer;
 930:	70 93 9e 01 	sts	0x019E, r23	; 0x80019e <g_ADCBuffer+0x1>
 934:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <g_ADCBuffer>
	ADMUX = (ADMUX & 0xE0) | channelNum; /* channel number that I want to read from */
 938:	97 b1       	in	r25, 0x07	; 7
 93a:	90 7e       	andi	r25, 0xE0	; 224
 93c:	89 2b       	or	r24, r25
 93e:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA , ADIE); /* enabling ADC interrupt */
 940:	86 b1       	in	r24, 0x06	; 6
 942:	88 60       	ori	r24, 0x08	; 8
 944:	86 b9       	out	0x06, r24	; 6
    SET_BIT(SREG , GLOBAL_INTERRUPT_BIT); /* enabling the global interrupt */
 946:	8f b7       	in	r24, 0x3f	; 63
 948:	80 68       	ori	r24, 0x80	; 128
 94a:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(ADCSRA , ADSC); /* ADC start conversion */
 94c:	86 b1       	in	r24, 0x06	; 6
 94e:	80 64       	ori	r24, 0x40	; 64
 950:	86 b9       	out	0x06, r24	; 6
	return E_OK;
}
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	08 95       	ret

00000956 <DIO_setupPinDirection>:
			break;
		case (PORTC_ID):
			DDRC = direction;
			break;
		case (PORTD_ID):
			DDRD = direction;
 956:	84 30       	cpi	r24, 0x04	; 4
 958:	08 f0       	brcs	.+2      	; 0x95c <DIO_setupPinDirection+0x6>
 95a:	6f c0       	rjmp	.+222    	; 0xa3a <DIO_setupPinDirection+0xe4>
 95c:	68 30       	cpi	r22, 0x08	; 8
 95e:	08 f0       	brcs	.+2      	; 0x962 <DIO_setupPinDirection+0xc>
 960:	6c c0       	rjmp	.+216    	; 0xa3a <DIO_setupPinDirection+0xe4>
 962:	81 30       	cpi	r24, 0x01	; 1
 964:	01 f1       	breq	.+64     	; 0x9a6 <DIO_setupPinDirection+0x50>
 966:	30 f0       	brcs	.+12     	; 0x974 <DIO_setupPinDirection+0x1e>
 968:	82 30       	cpi	r24, 0x02	; 2
 96a:	b1 f1       	breq	.+108    	; 0x9d8 <DIO_setupPinDirection+0x82>
 96c:	83 30       	cpi	r24, 0x03	; 3
 96e:	09 f4       	brne	.+2      	; 0x972 <DIO_setupPinDirection+0x1c>
 970:	4c c0       	rjmp	.+152    	; 0xa0a <DIO_setupPinDirection+0xb4>
 972:	08 95       	ret
 974:	41 30       	cpi	r20, 0x01	; 1
 976:	59 f4       	brne	.+22     	; 0x98e <DIO_setupPinDirection+0x38>
 978:	2a b3       	in	r18, 0x1a	; 26
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	02 c0       	rjmp	.+4      	; 0x984 <DIO_setupPinDirection+0x2e>
 980:	88 0f       	add	r24, r24
 982:	99 1f       	adc	r25, r25
 984:	6a 95       	dec	r22
 986:	e2 f7       	brpl	.-8      	; 0x980 <DIO_setupPinDirection+0x2a>
 988:	82 2b       	or	r24, r18
 98a:	8a bb       	out	0x1a, r24	; 26
 98c:	08 95       	ret
 98e:	2a b3       	in	r18, 0x1a	; 26
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	02 c0       	rjmp	.+4      	; 0x99a <DIO_setupPinDirection+0x44>
 996:	88 0f       	add	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	6a 95       	dec	r22
 99c:	e2 f7       	brpl	.-8      	; 0x996 <DIO_setupPinDirection+0x40>
 99e:	80 95       	com	r24
 9a0:	82 23       	and	r24, r18
 9a2:	8a bb       	out	0x1a, r24	; 26
 9a4:	08 95       	ret
 9a6:	41 30       	cpi	r20, 0x01	; 1
 9a8:	59 f4       	brne	.+22     	; 0x9c0 <DIO_setupPinDirection+0x6a>
 9aa:	27 b3       	in	r18, 0x17	; 23
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <DIO_setupPinDirection+0x60>
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	6a 95       	dec	r22
 9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <DIO_setupPinDirection+0x5c>
 9ba:	82 2b       	or	r24, r18
 9bc:	87 bb       	out	0x17, r24	; 23
 9be:	08 95       	ret
 9c0:	27 b3       	in	r18, 0x17	; 23
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_setupPinDirection+0x76>
 9c8:	88 0f       	add	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	6a 95       	dec	r22
 9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_setupPinDirection+0x72>
 9d0:	80 95       	com	r24
 9d2:	82 23       	and	r24, r18
 9d4:	87 bb       	out	0x17, r24	; 23
 9d6:	08 95       	ret
 9d8:	41 30       	cpi	r20, 0x01	; 1
 9da:	59 f4       	brne	.+22     	; 0x9f2 <DIO_setupPinDirection+0x9c>
 9dc:	24 b3       	in	r18, 0x14	; 20
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <DIO_setupPinDirection+0x92>
 9e4:	88 0f       	add	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	6a 95       	dec	r22
 9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <DIO_setupPinDirection+0x8e>
 9ec:	82 2b       	or	r24, r18
 9ee:	84 bb       	out	0x14, r24	; 20
 9f0:	08 95       	ret
 9f2:	24 b3       	in	r18, 0x14	; 20
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <DIO_setupPinDirection+0xa8>
 9fa:	88 0f       	add	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	6a 95       	dec	r22
 a00:	e2 f7       	brpl	.-8      	; 0x9fa <DIO_setupPinDirection+0xa4>
 a02:	80 95       	com	r24
 a04:	82 23       	and	r24, r18
 a06:	84 bb       	out	0x14, r24	; 20
 a08:	08 95       	ret
 a0a:	41 30       	cpi	r20, 0x01	; 1
 a0c:	59 f4       	brne	.+22     	; 0xa24 <DIO_setupPinDirection+0xce>
 a0e:	21 b3       	in	r18, 0x11	; 17
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_setupPinDirection+0xc4>
 a16:	88 0f       	add	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	6a 95       	dec	r22
 a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_setupPinDirection+0xc0>
 a1e:	82 2b       	or	r24, r18
 a20:	81 bb       	out	0x11, r24	; 17
 a22:	08 95       	ret
 a24:	21 b3       	in	r18, 0x11	; 17
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	02 c0       	rjmp	.+4      	; 0xa30 <DIO_setupPinDirection+0xda>
 a2c:	88 0f       	add	r24, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	6a 95       	dec	r22
 a32:	e2 f7       	brpl	.-8      	; 0xa2c <DIO_setupPinDirection+0xd6>
 a34:	80 95       	com	r24
 a36:	82 23       	and	r24, r18
 a38:	81 bb       	out	0x11, r24	; 17
 a3a:	08 95       	ret

00000a3c <DIO_writePin>:
 The port number to which the pin belongs (PORTA_ID, PORTB_ID, etc.).
 The pin number within the port.
 The value to write to the pin (LOGIC_HIGH or LOGIC_LOW).
 */
void DIO_writePin(uint8 port_number, uint8 pin_number, uint8 value) {
	if ((port_number >= NUMBER_OF_PORTS) || (pin_number >= NUMBER_OF_PINS_PER_PORT)) {
 a3c:	84 30       	cpi	r24, 0x04	; 4
 a3e:	08 f0       	brcs	.+2      	; 0xa42 <DIO_writePin+0x6>
 a40:	6f c0       	rjmp	.+222    	; 0xb20 <DIO_writePin+0xe4>
 a42:	68 30       	cpi	r22, 0x08	; 8
 a44:	08 f0       	brcs	.+2      	; 0xa48 <DIO_writePin+0xc>
 a46:	6c c0       	rjmp	.+216    	; 0xb20 <DIO_writePin+0xe4>

	} else {
		switch (port_number) {
 a48:	81 30       	cpi	r24, 0x01	; 1
 a4a:	01 f1       	breq	.+64     	; 0xa8c <DIO_writePin+0x50>
 a4c:	30 f0       	brcs	.+12     	; 0xa5a <DIO_writePin+0x1e>
 a4e:	82 30       	cpi	r24, 0x02	; 2
 a50:	b1 f1       	breq	.+108    	; 0xabe <DIO_writePin+0x82>
 a52:	83 30       	cpi	r24, 0x03	; 3
 a54:	09 f4       	brne	.+2      	; 0xa58 <DIO_writePin+0x1c>
 a56:	4c c0       	rjmp	.+152    	; 0xaf0 <DIO_writePin+0xb4>
 a58:	08 95       	ret
		case (PORTA_ID):
			if (value == LOGIC_HIGH) {
 a5a:	41 30       	cpi	r20, 0x01	; 1
 a5c:	59 f4       	brne	.+22     	; 0xa74 <DIO_writePin+0x38>
				SET_BIT(PORTA, pin_number);
 a5e:	2b b3       	in	r18, 0x1b	; 27
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <DIO_writePin+0x2e>
 a66:	88 0f       	add	r24, r24
 a68:	99 1f       	adc	r25, r25
 a6a:	6a 95       	dec	r22
 a6c:	e2 f7       	brpl	.-8      	; 0xa66 <DIO_writePin+0x2a>
 a6e:	82 2b       	or	r24, r18
 a70:	8b bb       	out	0x1b, r24	; 27
 a72:	08 95       	ret
			} else {
				CLEAR_BIT(PORTA, pin_number);
 a74:	2b b3       	in	r18, 0x1b	; 27
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <DIO_writePin+0x44>
 a7c:	88 0f       	add	r24, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	6a 95       	dec	r22
 a82:	e2 f7       	brpl	.-8      	; 0xa7c <DIO_writePin+0x40>
 a84:	80 95       	com	r24
 a86:	82 23       	and	r24, r18
 a88:	8b bb       	out	0x1b, r24	; 27
 a8a:	08 95       	ret
			}
			break;
		case (PORTB_ID):
			if (value == LOGIC_HIGH) {
 a8c:	41 30       	cpi	r20, 0x01	; 1
 a8e:	59 f4       	brne	.+22     	; 0xaa6 <DIO_writePin+0x6a>
				SET_BIT(PORTB, pin_number);
 a90:	28 b3       	in	r18, 0x18	; 24
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <DIO_writePin+0x60>
 a98:	88 0f       	add	r24, r24
 a9a:	99 1f       	adc	r25, r25
 a9c:	6a 95       	dec	r22
 a9e:	e2 f7       	brpl	.-8      	; 0xa98 <DIO_writePin+0x5c>
 aa0:	82 2b       	or	r24, r18
 aa2:	88 bb       	out	0x18, r24	; 24
 aa4:	08 95       	ret
			} else {
				CLEAR_BIT(PORTB, pin_number);
 aa6:	28 b3       	in	r18, 0x18	; 24
 aa8:	81 e0       	ldi	r24, 0x01	; 1
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <DIO_writePin+0x76>
 aae:	88 0f       	add	r24, r24
 ab0:	99 1f       	adc	r25, r25
 ab2:	6a 95       	dec	r22
 ab4:	e2 f7       	brpl	.-8      	; 0xaae <DIO_writePin+0x72>
 ab6:	80 95       	com	r24
 ab8:	82 23       	and	r24, r18
 aba:	88 bb       	out	0x18, r24	; 24
 abc:	08 95       	ret
			}
			break;
		case (PORTC_ID):
			if (value == LOGIC_HIGH) {
 abe:	41 30       	cpi	r20, 0x01	; 1
 ac0:	59 f4       	brne	.+22     	; 0xad8 <DIO_writePin+0x9c>
				SET_BIT(PORTC, pin_number);
 ac2:	25 b3       	in	r18, 0x15	; 21
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	02 c0       	rjmp	.+4      	; 0xace <DIO_writePin+0x92>
 aca:	88 0f       	add	r24, r24
 acc:	99 1f       	adc	r25, r25
 ace:	6a 95       	dec	r22
 ad0:	e2 f7       	brpl	.-8      	; 0xaca <DIO_writePin+0x8e>
 ad2:	82 2b       	or	r24, r18
 ad4:	85 bb       	out	0x15, r24	; 21
 ad6:	08 95       	ret
			} else {
				CLEAR_BIT(PORTC, pin_number);
 ad8:	25 b3       	in	r18, 0x15	; 21
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <DIO_writePin+0xa8>
 ae0:	88 0f       	add	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	6a 95       	dec	r22
 ae6:	e2 f7       	brpl	.-8      	; 0xae0 <DIO_writePin+0xa4>
 ae8:	80 95       	com	r24
 aea:	82 23       	and	r24, r18
 aec:	85 bb       	out	0x15, r24	; 21
 aee:	08 95       	ret
			}
			break;
		case (PORTD_ID):
			if (value == LOGIC_HIGH) {
 af0:	41 30       	cpi	r20, 0x01	; 1
 af2:	59 f4       	brne	.+22     	; 0xb0a <DIO_writePin+0xce>
				SET_BIT(PORTD, pin_number);
 af4:	22 b3       	in	r18, 0x12	; 18
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <DIO_writePin+0xc4>
 afc:	88 0f       	add	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	6a 95       	dec	r22
 b02:	e2 f7       	brpl	.-8      	; 0xafc <DIO_writePin+0xc0>
 b04:	82 2b       	or	r24, r18
 b06:	82 bb       	out	0x12, r24	; 18
 b08:	08 95       	ret
			} else {
				CLEAR_BIT(PORTD, pin_number);
 b0a:	22 b3       	in	r18, 0x12	; 18
 b0c:	81 e0       	ldi	r24, 0x01	; 1
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <DIO_writePin+0xda>
 b12:	88 0f       	add	r24, r24
 b14:	99 1f       	adc	r25, r25
 b16:	6a 95       	dec	r22
 b18:	e2 f7       	brpl	.-8      	; 0xb12 <DIO_writePin+0xd6>
 b1a:	80 95       	com	r24
 b1c:	82 23       	and	r24, r18
 b1e:	82 bb       	out	0x12, r24	; 18
 b20:	08 95       	ret

00000b22 <GlobalInterrupt_enable>:
/********************************************************************/

#include "atmega32_Interrupts.h"

void GlobalInterrupt_enable(void){
	SET_BIT(SREG , GLOBAL_INTERRUPT_BIT);
 b22:	8f b7       	in	r24, 0x3f	; 63
 b24:	80 68       	ori	r24, 0x80	; 128
 b26:	8f bf       	out	0x3f, r24	; 63
 b28:	08 95       	ret

00000b2a <TIMER0_vidInit>:
		/* Function is not working as expected */
		Local_u8ErrorStatus = FALSE;
	}

	return Local_u8ErrorStatus;
}
 b2a:	83 b7       	in	r24, 0x33	; 51
 b2c:	87 7b       	andi	r24, 0xB7	; 183
 b2e:	83 bf       	out	0x33, r24	; 51
 b30:	83 b7       	in	r24, 0x33	; 51
 b32:	83 bf       	out	0x33, r24	; 51
 b34:	83 b7       	in	r24, 0x33	; 51
 b36:	8f 7c       	andi	r24, 0xCF	; 207
 b38:	83 bf       	out	0x33, r24	; 51
 b3a:	83 b7       	in	r24, 0x33	; 51
 b3c:	83 bf       	out	0x33, r24	; 51
 b3e:	89 b7       	in	r24, 0x39	; 57
 b40:	81 60       	ori	r24, 0x01	; 1
 b42:	89 bf       	out	0x39, r24	; 57
 b44:	89 b7       	in	r24, 0x39	; 57
 b46:	8d 7f       	andi	r24, 0xFD	; 253
 b48:	89 bf       	out	0x39, r24	; 57
 b4a:	08 95       	ret

00000b4c <TIMER0_vidStart>:
 b4c:	83 b7       	in	r24, 0x33	; 51
 b4e:	88 7f       	andi	r24, 0xF8	; 248
 b50:	83 bf       	out	0x33, r24	; 51
 b52:	83 b7       	in	r24, 0x33	; 51
 b54:	85 60       	ori	r24, 0x05	; 5
 b56:	83 bf       	out	0x33, r24	; 51
 b58:	08 95       	ret

00000b5a <TIMER0_vidStop>:
 b5a:	83 b7       	in	r24, 0x33	; 51
 b5c:	88 7f       	andi	r24, 0xF8	; 248
 b5e:	83 bf       	out	0x33, r24	; 51
 b60:	08 95       	ret

00000b62 <TIMER0_vidSetPreloadValue>:
 b62:	82 bf       	out	0x32, r24	; 50
 b64:	08 95       	ret

00000b66 <TIMER0_vidEnableOverflowInterrupt>:
 b66:	89 b7       	in	r24, 0x39	; 57
 b68:	81 60       	ori	r24, 0x01	; 1
 b6a:	89 bf       	out	0x39, r24	; 57
 b6c:	08 95       	ret

00000b6e <TIMER0_u8SetOverflowCallback>:
 b6e:	00 97       	sbiw	r24, 0x00	; 0
 b70:	31 f0       	breq	.+12     	; 0xb7e <TIMER0_u8SetOverflowCallback+0x10>
 b72:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <TIMER0_pvOverflowCallbakFunc+0x1>
 b76:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <TIMER0_pvOverflowCallbakFunc>
 b7a:	81 e0       	ldi	r24, 0x01	; 1
 b7c:	08 95       	ret
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	08 95       	ret

00000b82 <TIMER0_vidClearOvfFlag>:
/* Return          : void
/* =============================================================================================================*/
void TIMER0_vidClearOvfFlag(void)
{
	  /* Clear TOV0 bit in TIFR Register by Writing Logical 1 to it */
	  TIFR |= (1 << TOV0);
 b82:	88 b7       	in	r24, 0x38	; 56
 b84:	81 60       	ori	r24, 0x01	; 1
 b86:	88 bf       	out	0x38, r24	; 56
 b88:	08 95       	ret

00000b8a <__vector_11>:
/* 				        Timer/Counter0 Overflow Interrupt
/* =============================================================================================================*/

void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; 
void __vector_11 (void)
{
 b8a:	1f 92       	push	r1
 b8c:	0f 92       	push	r0
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	0f 92       	push	r0
 b92:	11 24       	eor	r1, r1
 b94:	2f 93       	push	r18
 b96:	3f 93       	push	r19
 b98:	4f 93       	push	r20
 b9a:	5f 93       	push	r21
 b9c:	6f 93       	push	r22
 b9e:	7f 93       	push	r23
 ba0:	8f 93       	push	r24
 ba2:	9f 93       	push	r25
 ba4:	af 93       	push	r26
 ba6:	bf 93       	push	r27
 ba8:	ef 93       	push	r30
 baa:	ff 93       	push	r31
	/*Check if Timer0 overflow function is registered or not*/
	if(TIMER0_pvOverflowCallbakFunc != NULL)
 bac:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <TIMER0_pvOverflowCallbakFunc>
 bb0:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <TIMER0_pvOverflowCallbakFunc+0x1>
 bb4:	30 97       	sbiw	r30, 0x00	; 0
 bb6:	09 f0       	breq	.+2      	; 0xbba <__vector_11+0x30>
	{
		/*Invoke Timer0 overflow function*/
		TIMER0_pvOverflowCallbakFunc();
 bb8:	09 95       	icall
	}
}
 bba:	ff 91       	pop	r31
 bbc:	ef 91       	pop	r30
 bbe:	bf 91       	pop	r27
 bc0:	af 91       	pop	r26
 bc2:	9f 91       	pop	r25
 bc4:	8f 91       	pop	r24
 bc6:	7f 91       	pop	r23
 bc8:	6f 91       	pop	r22
 bca:	5f 91       	pop	r21
 bcc:	4f 91       	pop	r20
 bce:	3f 91       	pop	r19
 bd0:	2f 91       	pop	r18
 bd2:	0f 90       	pop	r0
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	0f 90       	pop	r0
 bd8:	1f 90       	pop	r1
 bda:	18 95       	reti

00000bdc <__vector_10>:
/* =============================================================================================================*/
/*				     Timer/Counter0 Compare Match Interrupt
/* =============================================================================================================*/
void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_10 (void)
{
 bdc:	1f 92       	push	r1
 bde:	0f 92       	push	r0
 be0:	0f b6       	in	r0, 0x3f	; 63
 be2:	0f 92       	push	r0
 be4:	11 24       	eor	r1, r1
 be6:	2f 93       	push	r18
 be8:	3f 93       	push	r19
 bea:	4f 93       	push	r20
 bec:	5f 93       	push	r21
 bee:	6f 93       	push	r22
 bf0:	7f 93       	push	r23
 bf2:	8f 93       	push	r24
 bf4:	9f 93       	push	r25
 bf6:	af 93       	push	r26
 bf8:	bf 93       	push	r27
 bfa:	ef 93       	push	r30
 bfc:	ff 93       	push	r31
	/* Check if Timer0 compare match function is registered or not */
	if(TIMER0_pvComapareMatchCallbakFunc != NULL)
 bfe:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <TIMER0_pvComapareMatchCallbakFunc>
 c02:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <TIMER0_pvComapareMatchCallbakFunc+0x1>
 c06:	30 97       	sbiw	r30, 0x00	; 0
 c08:	09 f0       	breq	.+2      	; 0xc0c <__vector_10+0x30>
	{
		/* Invoke Timer0 compare match function */
		TIMER0_pvComapareMatchCallbakFunc();
 c0a:	09 95       	icall
	}
}
 c0c:	ff 91       	pop	r31
 c0e:	ef 91       	pop	r30
 c10:	bf 91       	pop	r27
 c12:	af 91       	pop	r26
 c14:	9f 91       	pop	r25
 c16:	8f 91       	pop	r24
 c18:	7f 91       	pop	r23
 c1a:	6f 91       	pop	r22
 c1c:	5f 91       	pop	r21
 c1e:	4f 91       	pop	r20
 c20:	3f 91       	pop	r19
 c22:	2f 91       	pop	r18
 c24:	0f 90       	pop	r0
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	0f 90       	pop	r0
 c2a:	1f 90       	pop	r1
 c2c:	18 95       	reti

00000c2e <__itoa_ncheck>:
 c2e:	bb 27       	eor	r27, r27
 c30:	4a 30       	cpi	r20, 0x0A	; 10
 c32:	31 f4       	brne	.+12     	; 0xc40 <__itoa_ncheck+0x12>
 c34:	99 23       	and	r25, r25
 c36:	22 f4       	brpl	.+8      	; 0xc40 <__itoa_ncheck+0x12>
 c38:	bd e2       	ldi	r27, 0x2D	; 45
 c3a:	90 95       	com	r25
 c3c:	81 95       	neg	r24
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__utoa_common>

00000c44 <__utoa_ncheck>:
 c44:	bb 27       	eor	r27, r27

00000c46 <__utoa_common>:
 c46:	fb 01       	movw	r30, r22
 c48:	55 27       	eor	r21, r21
 c4a:	aa 27       	eor	r26, r26
 c4c:	88 0f       	add	r24, r24
 c4e:	99 1f       	adc	r25, r25
 c50:	aa 1f       	adc	r26, r26
 c52:	a4 17       	cp	r26, r20
 c54:	10 f0       	brcs	.+4      	; 0xc5a <__utoa_common+0x14>
 c56:	a4 1b       	sub	r26, r20
 c58:	83 95       	inc	r24
 c5a:	50 51       	subi	r21, 0x10	; 16
 c5c:	b9 f7       	brne	.-18     	; 0xc4c <__utoa_common+0x6>
 c5e:	a0 5d       	subi	r26, 0xD0	; 208
 c60:	aa 33       	cpi	r26, 0x3A	; 58
 c62:	08 f0       	brcs	.+2      	; 0xc66 <__utoa_common+0x20>
 c64:	a9 5d       	subi	r26, 0xD9	; 217
 c66:	a1 93       	st	Z+, r26
 c68:	00 97       	sbiw	r24, 0x00	; 0
 c6a:	79 f7       	brne	.-34     	; 0xc4a <__utoa_common+0x4>
 c6c:	b1 11       	cpse	r27, r1
 c6e:	b1 93       	st	Z+, r27
 c70:	11 92       	st	Z+, r1
 c72:	cb 01       	movw	r24, r22
 c74:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <strrev>

00000c78 <strrev>:
 c78:	dc 01       	movw	r26, r24
 c7a:	fc 01       	movw	r30, r24
 c7c:	67 2f       	mov	r22, r23
 c7e:	71 91       	ld	r23, Z+
 c80:	77 23       	and	r23, r23
 c82:	e1 f7       	brne	.-8      	; 0xc7c <strrev+0x4>
 c84:	32 97       	sbiw	r30, 0x02	; 2
 c86:	04 c0       	rjmp	.+8      	; 0xc90 <strrev+0x18>
 c88:	7c 91       	ld	r23, X
 c8a:	6d 93       	st	X+, r22
 c8c:	70 83       	st	Z, r23
 c8e:	62 91       	ld	r22, -Z
 c90:	ae 17       	cp	r26, r30
 c92:	bf 07       	cpc	r27, r31
 c94:	c8 f3       	brcs	.-14     	; 0xc88 <strrev+0x10>
 c96:	08 95       	ret

00000c98 <_exit>:
 c98:	f8 94       	cli

00000c9a <__stop_program>:
 c9a:	ff cf       	rjmp	.-2      	; 0xc9a <__stop_program>
